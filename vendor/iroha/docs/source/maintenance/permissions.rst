.. DON'T MODIFY THE CONTENTS MANUALLY.
   THIS IS AUTOGENERATED FILE.
   All the changes will be lost in case of manual modification.
   For modification change the files in docs/source/permissions.   Then do "make permissions" before "make html".

***********
Permissions
***********

Hyperledger Iroha uses a role-based access control system to limit actions of its users.
This system greatly helps to implement use cases involving user groups having different access levels —
ranging from the weak users, who can't even receive asset transfer to the super-users.
The beauty of our permission system is that you don't have to have a super-user
in your Iroha setup or use all the possible permissions: you can create segregated and lightweight roles.

Maintenance of the system involves setting up roles and permissions, that are included in the roles.
This might be done at the initial step of system deployment — in genesis block,
or later when Iroha network is up and running, roles can be changed (if there is a role that can do that :)

This section will help you to understand permissions and give you an idea of how to create roles including certain permissions.
Each permission is provided with an example written in Python that demonstrates the way of transaction or query creation,
which require specific permission. Every example uses *commons.py* module, which listing is available at `Supplementary Sources`_ section.

Command-related permissions
===========================

Account
-------

can_create_account
^^^^^^^^^^^^^^^^^^

Allows creating new `accounts <../core_concepts/glossary.html#account>`__.

| Related API method: `Create Account <../api/commands.html#create-account>`__
| Usage in Java bindings: ``Role.kCreateAccount``
| Usage in Python bindings: ``Role_kCreateAccount``
|

**Example**

| Admin creates domain "test" that contains only can_create_account permission and Alice account in that domain. Alice can create Bob account.
|

.. literalinclude:: ../../../example/python/permissions/can_create_account.py
    :language: python
    :linenos:
    :lines: 9-42

can_set_detail
^^^^^^^^^^^^^^

Allows setting `account <../core_concepts/glossary.html#account>`__ detail.

The `permission <../core_concepts/glossary.html#permission>`__ allows setting details to other accounts. Another way to set detail without can_set_detail permission is to grant `can_set_my_account_detail`_ permission to someone. In order to grant, `transaction <../core_concepts/glossary.html#transaction>`__ creator should have `can_grant_can_set_my_account_detail`_ permission.

.. Note:: Transaction creator can always set detail for own account even without that permission.

| Related API method: `Set Account Detail <../api/commands.html#set-account-detail>`__
| Usage in Java bindings: ``Role.kSetDetail``
| Usage in Python bindings: ``Role_kSetDetail``
|

**Example**

| Admin creates domain "test" that contains only can_set_detail permission and Alice account in that domain. Alice can set detail for Admin account.
|

.. literalinclude:: ../../../example/python/permissions/can_set_detail.py
    :language: python
    :linenos:
    :lines: 9-39

can_set_my_account_detail
^^^^^^^^^^^^^^^^^^^^^^^^^

.. Hint:: This is a grantable permission.

`Permission <../core_concepts/glossary.html#permission>`__ that allows a specified `account <../core_concepts/glossary.html#account>`__ to set details for the another specified account.

.. Note:: To grant the permission an account should already have a role with `can_grant_can_set_my_account_detail`_ permission.

| Related API method: `Set Account Detail <../api/commands.html#set-account-detail>`__
| Usage in Java bindings: ``Grantable.kSetMyAccountDetail``
| Usage in Python bindings: ``Grantable_kSetMyAccountDetail``
|

**Example**

| Admin creates domain "test" that contains only can_grant_can_set_my_account_detail permission and two accounts for Alice and Bob in that domain. Alice grants to Bob can_set_my_account_detail permission. Bob can set detail for Alice account.
|

.. literalinclude:: ../../../example/python/permissions/can_set_my_account_detail.py
    :language: python
    :linenos:
    :lines: 9-54

Asset
-----

can_create_asset
^^^^^^^^^^^^^^^^

Allows creating new `assets <../core_concepts/glossary.html#asset>`__.

| Related API method: `Create Asset <../api/commands.html#create-asset>`__
| Usage in Java bindings: ``Role.kCreateAsset``
| Usage in Python bindings: ``Role_kCreateAsset``
|

**Example**

| Admin creates domain "test" that contains only can_create_asset permission and Alice account in that domain. Alice can create new assets.
|

.. literalinclude:: ../../../example/python/permissions/can_create_asset.py
    :language: python
    :linenos:
    :lines: 9-39

can_receive
^^^^^^^^^^^

Allows `account <../core_concepts/glossary.html#account>`__ receive `assets <../core_concepts/glossary.html#asset>`__.

| Related API method: `Transfer Asset <../api/commands.html#transfer-asset>`__
| Usage in Java bindings: ``Role.kReceive``
| Usage in Python bindings: ``Role_kReceive``
|

**Example**

| Admin creates domain "test" that contains can_receive and can_transfer permissions and two accounts for Alice and Bob. Admin creates "coin" asset, adds some quantity of it and transfers the asset to Alice. Alice can transfer assets to Bob (Alice has can_transfer permission and Bob has can_receive permission).
|

.. literalinclude:: ../../../example/python/permissions/can_receive.py
    :language: python
    :linenos:
    :lines: 9-47

can_transfer
^^^^^^^^^^^^

Allows sending `assets <../core_concepts/glossary.html#asset>`__ from an `account <../core_concepts/glossary.html#account>`__ of `transaction <../core_concepts/glossary.html#transaction>`__ creator.

You can transfer an asset from one `domain <../core_concepts/glossary.html#domain>`__ to another, even if the other domain does not have an asset with the same name.

.. Note:: Destination account should have `can_receive`_ permission.

| Related API method: `Transfer Asset <../api/commands.html#transfer-asset>`__
| Usage in Java bindings: ``Role.kTransfer``
| Usage in Python bindings: ``Role_kTransfer``
|

.. literalinclude:: ../../../example/python/permissions/can_transfer.py
    :language: python
    :linenos:
    :lines: 1-11

can_transfer_my_assets
^^^^^^^^^^^^^^^^^^^^^^

.. Hint:: This is a grantable permission.

`Permission <../core_concepts/glossary.html#permission>`__ that allows a specified `account <../core_concepts/glossary.html#account>`__ to transfer `assets <../core_concepts/glossary.html#asset>`__ of another specified account.

See the example (to be done) for the usage details.

| Related API method: `Transfer Asset <../api/commands.html#transfer-asset>`__
| Usage in Java bindings: ``Grantable.kTransferMyAssets``
| Usage in Python bindings: ``Grantable_kTransferMyAssets``
|

**Example**

| Admin creates domain "test" that contains can_grant_can_transfer_my_assets, can_receive, can_transfer permissions and two accounts for Alice and Bob in that domain. Admin issues some amount of "coin" asset and transfers it to Alice. Alice grants to Bob can_transfer_my_assets permission. Bob can transfer Alice's assets to any account that has can_receive permission, for example, to Admin.
|

.. literalinclude:: ../../../example/python/permissions/can_transfer_my_assets.py
    :language: python
    :linenos:
    :lines: 9-59

Asset Quantity
--------------

can_add_asset_qty
^^^^^^^^^^^^^^^^^

Allows issuing `assets <../core_concepts/glossary.html#asset>`__.

The corresponding `command <../core_concepts/glossary.html#command>`__ can be executed only for an `account <../core_concepts/glossary.html#account>`__ of `transaction <../core_concepts/glossary.html#transaction>`__ creator and only if that account has a `role <../core_concepts/glossary.html#role>`__ with the `permission <../core_concepts/glossary.html#permission>`__.

| Related API method: `Add Asset Quantity <../api/commands.html#add-asset-quantity>`__
| Usage in Java bindings: ``Role.kAddAssetQty``
| Usage in Python bindings: ``Role_kAddAssetQty``
|

**Example**

| Admin creates domain "test" that contains only can_add_asset_qty permission and Alice account in that domain. Admin craetes "coin" asset. Alice can add to own account any amount of any asset (e.g. "coin" asset).
|

.. literalinclude:: ../../../example/python/permissions/can_add_asset_qty.py
    :language: python
    :linenos:
    :lines: 9-40

can_subtract_asset_qty
^^^^^^^^^^^^^^^^^^^^^^

Allows burning `assets <../core_concepts/glossary.html#asset>`__.

The corresponding `command <../core_concepts/glossary.html#command>`__ can be executed only for an `account <../core_concepts/glossary.html#account>`__ of `transaction <../core_concepts/glossary.html#transaction>`__ creator and only if that account has a `role <../core_concepts/glossary.html#role>`__ with the `permission <../core_concepts/glossary.html#permission>`__.

| Related API method: `Subtract Asset Quantity <../api/commands.html#subtract-asset-quantity>`__
| Usage in Java bindings: ``Role.kSubtractAssetQty``
| Usage in Python bindings: ``Role_kSubtractAssetQty``
|

**Example**

| Admin creates domain "test" that contains only can_subtract_asset_qty permission and Alice account in that domain. Admin issues some amount of "coin" asset and transfers some amount of "coin" asset to Alice. Alice can burn any amount of "coin" assets.
|

.. literalinclude:: ../../../example/python/permissions/can_subtract_asset_qty.py
    :language: python
    :linenos:
    :lines: 9-42

Domain
------

can_create_domain
^^^^^^^^^^^^^^^^^

Allows creating new `domains <../core_concepts/glossary.html#domain>`__ within the system.

| Related API method: `Create Domain <../api/commands.html#create-domain>`__
| Usage in Java bindings: ``Role.kCreateDomain``
| Usage in Python bindings: ``Role_kCreateDomain``
|

**Example**

| Admin creates domain that contains only can_create_domain permission and Alice account in that domain. Alice can create new domains.
|

.. literalinclude:: ../../../example/python/permissions/can_create_domain.py
    :language: python
    :linenos:
    :lines: 9-40

Grant
-----

can_grant_can_add_my_signatory
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Allows `role <../core_concepts/glossary.html#role>`__ owners grant `can_add_my_signatory`_ `permission <../core_concepts/glossary.html#permission>`__.

| Related API method: `Grant Permission <../api/commands.html#grant-permission>`__
| Usage in Java bindings: ``Role.kAddMySignatory``
| Usage in Python bindings: ``Role_kAddMySignatory``
|

**Example**

| Admin creates domain that contains only can_grant_can_add_my_signatory permission and two accounts for Alice and Bob in that domain. Alice can grant to Bob can_add_my_signatory permission.
|

.. literalinclude:: ../../../example/python/permissions/can_grant_can_add_my_signatory.py
    :language: python
    :linenos:
    :lines: 9-41

can_grant_can_remove_my_signatory
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Allows `role <../core_concepts/glossary.html#role>`__ owners grant `can_remove_my_signatory`_ `permission <../core_concepts/glossary.html#permission>`__.

| Related API method: `Grant Permission <../api/commands.html#grant-permission>`__
| Usage in Java bindings: ``Role.kRemoveMySignatory``
| Usage in Python bindings: ``Role_kRemoveMySignatory``
|

**Example**

| Admin creates domain that contains only can_grant_can_remove_my_signatory permission and two accounts for Alice and Bob in that domain. Alice can grant to Bob can_remove_my_signatory permission.
|

.. literalinclude:: ../../../example/python/permissions/can_grant_can_remove_my_signatory.py
    :language: python
    :linenos:
    :lines: 9-41

can_grant_can_set_my_account_detail
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Allows `role <../core_concepts/glossary.html#role>`__ owners grant `can_set_my_account_detail`_ `permission <../core_concepts/glossary.html#permission>`__.

| Related API method: `Grant Permission <../api/commands.html#grant-permission>`__
| Usage in Java bindings: ``Role.kSetMyAccountDetail``
| Usage in Python bindings: ``Role_kSetMyAccountDetail``
|

**Example**

| Admin creates domain that contains only can_grant_can_set_my_account_detail permission and two accounts for Alice and Bob in that domain. Alice can grant to Bob can_set_my_account_detail permission.
|

.. literalinclude:: ../../../example/python/permissions/can_grant_can_set_my_account_detail.py
    :language: python
    :linenos:
    :lines: 9-41

can_grant_can_set_my_quorum
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Allows `role <../core_concepts/glossary.html#role>`__ owners grant `can_set_my_quorum`_ `permission <../core_concepts/glossary.html#permission>`__.

| Related API method: `Grant Permission <../api/commands.html#grant-permission>`__
| Usage in Java bindings: ``Role.kSetMyQuorum``
| Usage in Python bindings: ``Role_kSetMyQuorum``
|

**Example**

| Admin creates domain that contains only can_grant_can_set_my_quorum permission and two accounts for Alice and Bob in that domain. Alice can grant to Bob can_set_my_quorum permission.
|

.. literalinclude:: ../../../example/python/permissions/can_grant_can_set_my_quorum.py
    :language: python
    :linenos:
    :lines: 9-41

can_grant_can_transfer_my_assets
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Allows `role <../core_concepts/glossary.html#role>`__ owners grant `can_transfer_my_assets`_ `permission <../core_concepts/glossary.html#permission>`__.

| Related API method: `Grant Permission <../api/commands.html#grant-permission>`__
| Usage in Java bindings: ``Role.kTransferMyAssets``
| Usage in Python bindings: ``Role_kTransferMyAssets``
|

**Example**

| Admin creates domain that contains only can_grant_can_transfer_my_assets permission and two accounts for Alice and Bob in that domain. Alice can grant to Bob can_transfer_my_assets permission.
|

.. literalinclude:: ../../../example/python/permissions/can_grant_can_transfer_my_assets.py
    :language: python
    :linenos:
    :lines: 9-48

Peer
----

can_add_peer
^^^^^^^^^^^^

Allows adding `peers <../core_concepts/glossary.html#peer>`__ to the network.

A new peer will be a valid participant in the next `consensus <../core_concepts/glossary.html#consensus>`__ round after an agreement on `transaction <../core_concepts/glossary.html#transaction>`__ containing "addPeer" `command <../core_concepts/glossary.html#command>`__.

| Related API method: `Add Peer <../api/commands.html#add-peer>`__
| Usage in Java bindings: ``Role.kAddPeer``
| Usage in Python bindings: ``Role_kAddPeer``
|

**Example**

| Admin creates domain that contains only can_add_peer permission and Alice account in that domain. Alice can add new peers.
|

.. literalinclude:: ../../../example/python/permissions/can_add_peer.py
    :language: python
    :linenos:
    :lines: 9-40

Role
----

can_append_role
^^^^^^^^^^^^^^^

Allows appending `roles <../core_concepts/glossary.html#role>`__ to another `account <../core_concepts/glossary.html#account>`__.

You can append only that role that has lesser or the same set of privileges as `transaction <../core_concepts/glossary.html#transaction>`__ creator.

| Related API method: `Append Role <../api/commands.html#append-role>`__
| Usage in Java bindings: ``Role.kAppendRole``
| Usage in Python bindings: ``Role_kAppendRole``
|

**Example**

| Admin creates domian that contains can_append_role and can_add_peer permissions and two accounts for Alice and Bob in that domain. Admin creates the second role that contains only can_add_peer permission. Alice can append role to Bob.
|

.. literalinclude:: ../../../example/python/permissions/can_append_role.py
    :language: python
    :linenos:
    :lines: 9-48

can_create_role
^^^^^^^^^^^^^^^

Allows creating a new `role <../core_concepts/glossary.html#role>`__ within a system.

Possible set of `permissions <../core_concepts/glossary.html#permission>`__ for a new role is limited to those permissions that `transaction <../core_concepts/glossary.html#transaction>`__ creator has.


| Related API method: `Create Role <../api/commands.html#create-role>`__
| Usage in Java bindings: ``Role.kCreateRole``
| Usage in Python bindings: ``Role_kCreateRole``
|

**Example**

| Admin creates domain that contains only can_create_role permission and Alice account in that domain. Alice can create new roles.
|

.. literalinclude:: ../../../example/python/permissions/can_create_role.py
    :language: python
    :linenos:
    :lines: 9-44

can_detach_role
^^^^^^^^^^^^^^^

Allows revoking a `role <../core_concepts/glossary.html#role>`__ from a user.

.. Note:: Due to a known issue the permission allows to detach any role without limitations https://soramitsu.atlassian.net/browse/IR-1468

| Related API method: `Detach Role <../api/commands.html#detach-role>`__
| Usage in Java bindings: ``Role.kDetachRole``
| Usage in Python bindings: ``Role_kDetachRole``
|

**Example**

| Admin creates domain that contains only can_detach_role permission and creates Alice account in that domain. Admin has two roles test_role and admin_role. Alice can detach test_role from Admin account.
|

.. literalinclude:: ../../../example/python/permissions/can_detach_role.py
    :language: python
    :linenos:
    :lines: 9-39

Signatory
---------

can_add_my_signatory
^^^^^^^^^^^^^^^^^^^^

.. Hint:: This is a grantable permission.

`Permission <../core_concepts/glossary.html#permission>`__ that allows a specified `account <../core_concepts/glossary.html#account>`__ to add an extra public key to the another specified account.

| Related API method: `Add Signatory <../api/commands.html#add-signatory>`__
| Usage in Java bindings: ``Grantable.kAddMySignatory``
| Usage in Python bindings: ``Grantable_kAddMySignatory``
|

**Example**

| Admin creates domain that contains only can_grant_can_add_my_signatory permission and two accounts for Alice and Bob in that domain. Alice can grant to Bob can_add_my_signatory permission. Bob can add an extra key to Alice account.
|

.. literalinclude:: ../../../example/python/permissions/can_add_my_signatory.py
    :language: python
    :linenos:
    :lines: 9-53

can_add_signatory
^^^^^^^^^^^^^^^^^

Allows linking additional public keys to `account <../core_concepts/glossary.html#account>`__.

The corresponding `command <../core_concepts/glossary.html#command>`__ can be executed only for an account of `transaction <../core_concepts/glossary.html#transaction>`__ creator and only if that account has a `role <../core_concepts/glossary.html#role>`__ with the `permission <../core_concepts/glossary.html#permission>`__.

| Related API method: `Add Signatory <../api/commands.html#add-signatory>`__
| Usage in Java bindings: ``Role.kAddSignatory``
| Usage in Python bindings: ``Role_kAddSignatory``
|

**Example**

| Admin creates domain that contains only can_add_signatory permission and Alice account in that domain. Alice can add to own account additional keys.
|

.. literalinclude:: ../../../example/python/permissions/can_add_signatory.py
    :language: python
    :linenos:
    :lines: 9-40

can_remove_my_signatory
^^^^^^^^^^^^^^^^^^^^^^^

.. Hint:: This is a grantable permission.

`Permission <../core_concepts/glossary.html#permission>`__ that allows a specified `account <../core_concepts/glossary.html#account>`__ remove public key from the another specified account.

See the example (to be done) for the usage details.

| Related API method: `Remove Signatory <../api/commands.html#remove-signatory>`__
| Usage in Java bindings: ``Grantable.kRemoveMySignatory``
| Usage in Python bindings: ``Grantable_kRemoveMySignatory``
|

**Example**

| Admin creates domain that contains can_add_signatory and can_grant_can_remove_my_signatory permissions and two accounts for Alice and Bob. Alice grants can_remove_my_signatory permission to Bob and adds additional key to own account. Bob can remove one of Alice's keys.
|

.. literalinclude:: ../../../example/python/permissions/can_remove_my_signatory.py
    :language: python
    :linenos:
    :lines: 9-57

can_remove_signatory
^^^^^^^^^^^^^^^^^^^^

Allows unlinking additional public keys from an `account <../core_concepts/glossary.html#account>`__.

The corresponding `command <../core_concepts/glossary.html#command>`__ can be executed only for an account of `transaction <../core_concepts/glossary.html#transaction>`__ creator and only if that account has a `role <../core_concepts/glossary.html#role>`__ with the `permission <../core_concepts/glossary.html#permission>`__.

| Related API method: `Remove Signatory <../api/commands.html#remove-signatory>`__
| Usage in Java bindings: ``Role.kRemoveSignatory``
| Usage in Python bindings: ``Role_kRemoveSignatory``
|

**Example**

| Admin creates domian that contains can_remove_signatory permission and Alice account in that domain. Admin adds an extra key to Alice account. Alice can remove one of the keys.
|

.. literalinclude:: ../../../example/python/permissions/can_remove_signatory.py
    :language: python
    :linenos:
    :lines: 9-41

can_set_my_quorum
^^^^^^^^^^^^^^^^^

.. Hint:: This is a grantable permission.

`Permission <../core_concepts/glossary.html#permission>`__ that allows a specified `account <../core_concepts/glossary.html#account>`__ to set `quorum <../core_concepts/glossary.html#quorum>`__ for the another specified account.

Account should have greater or equal amount of keys than quorum.

| Related API method: `Set Account Quorum <../api/commands.html#set-account-quorum>`__
| Usage in Java bindings: ``Grantable.kSetMyQuorum``
| Usage in Python bindings: ``Grantable_kSetMyQuorum``
|

**Example**

| Admin creates domain that contains can_grant_can_set_my_quorum and can_add_signatory permissions and create two accounts for Alice and Bob in that domain. Alice grants to Bob can_set_my_qourum permission and adds an extra key to account. Bob can set quorum for Alice.
|

.. literalinclude:: ../../../example/python/permissions/can_set_my_quorum.py
    :language: python
    :linenos:
    :lines: 9-57

can_set_quorum
^^^^^^^^^^^^^^

Allows setting `quorum <../core_concepts/glossary.html#quorum>`__.

At least the same number (or more) of public keys should be already linked to an `account <../core_concepts/glossary.html#account>`__.

| Related API method: `Set Account Quorum <../api/commands.html#set-account-quorum>`__
| Usage in Java bindings: ``Role.kSetQuorum``
| Usage in Python bindings: ``Role_kSetQuorum``
|

**Example**

| Admin creates domain that contains only can_set_quorum permission and creates Alice account in that domain. Admin adds an extra key for Alice account. Alice can set quorum equals two.
|

.. literalinclude:: ../../../example/python/permissions/can_set_quorum.py
    :language: python
    :linenos:
    :lines: 9-42

Query-related permissions
=========================

Account
-------

can_get_all_acc_detail
^^^^^^^^^^^^^^^^^^^^^^

Allows getting all the details set to any `account <../core_concepts/glossary.html#account>`__ within the system.

| Related API method: To be done
| Usage in Java bindings: ``Role.kGetAllAccDetail``
| Usage in Python bindings: ``Role_kGetAllAccDetail``
|

**Example**

| Admin creates Alice account in a diffrerent domain that has only can_get_all_acc_detail permission. Alice can access details set to Admin account.
|

.. literalinclude:: ../../../example/python/permissions/can_get_all_acc_detail.py
    :language: python
    :linenos:
    :lines: 9-40

can_get_all_accounts
^^^^^^^^^^^^^^^^^^^^

Allows getting `account <../core_concepts/glossary.html#account>`__ information: `quorum <../core_concepts/glossary.html#quorum>`__ and all the details related to the account.

With this `permission <../core_concepts/glossary.html#permission>`__, `query <../core_concepts/glossary.html#query>`__ creator can get information about any account within a system.

All the details (set by the account owner or owners of other accounts) will be returned.

| Related API method: `Get Account <../api/queries.html#get-account>`__
| Usage in Java bindings: ``Role.kGetAllAccounts``
| Usage in Python bindings: ``Role_kGetAllAccounts``
|

**Example**

| Admin creates Alice account in a different domain that has only can_get_all_accounts permission. Alice can access account information of Admin.
|

.. literalinclude:: ../../../example/python/permissions/can_get_all_accounts.py
    :language: python
    :linenos:
    :lines: 9-40

can_get_domain_acc_detail
^^^^^^^^^^^^^^^^^^^^^^^^^

Allows getting all the details set to any `account <../core_concepts/glossary.html#account>`__ within the same `domain <../core_concepts/glossary.html#domain>`__ as a domain of `query <../core_concepts/glossary.html#query>`__ creator account.

| Related API method: To be done
| Usage in Java bindings: ``Role.kGetDomainAccDetail``
| Usage in Python bindings: ``Role_kGetDomainAccDetail``
|

**Example**

| Admin creates Alice account in the same domain that has only can_get_domain_acc_detail permission. Alice can get details set to Admin account.
|

.. literalinclude:: ../../../example/python/permissions/can_get_domain_acc_detail.py
    :language: python
    :linenos:
    :lines: 9-39

can_get_domain_accounts
^^^^^^^^^^^^^^^^^^^^^^^

Allows getting `account <../core_concepts/glossary.html#account>`__ information: `quorum <../core_concepts/glossary.html#quorum>`__ and all the details related to the account.

With this `permission <../core_concepts/glossary.html#permission>`__, `query <../core_concepts/glossary.html#query>`__ creator can get information only about accounts from the same `domain <../core_concepts/glossary.html#domain>`__.

All the details (set by the account owner or owners of other accounts) will be returned.

| Related API method: `Get Account <../api/queries.html#get-account>`__
| Usage in Java bindings: ``Role.kGetDomainAccounts``
| Usage in Python bindings: ``Role_kGetDomainAccounts``
|

**Example**

| Admin creates Alice account in the same domain that has only can_get_domain_accounts. Alice can access account information of Admin.
|

.. literalinclude:: ../../../example/python/permissions/can_get_domain_accounts.py
    :language: python
    :linenos:
    :lines: 9-39

can_get_my_acc_detail
^^^^^^^^^^^^^^^^^^^^^

Allows getting all the details set to the `account <../core_concepts/glossary.html#account>`__ of `query <../core_concepts/glossary.html#query>`__ creator.

| Related API method: To be done
| Usage in Java bindings: ``Role.kGetMyAccDetail``
| Usage in Python bindings: ``Role_kGetMyAccDetail``
|

**Example**

| Admin creates Alice account in the domain that has only can_get_my_acc_detail permission. Alice can get details set to own account.
|

.. literalinclude:: ../../../example/python/permissions/can_get_my_acc_detail.py
    :language: python
    :linenos:
    :lines: 9-39

can_get_my_account
^^^^^^^^^^^^^^^^^^

Allows getting `account <../core_concepts/glossary.html#account>`__ information: `quorum <../core_concepts/glossary.html#quorum>`__ and all the details related to the account.

With this `permission <../core_concepts/glossary.html#permission>`__, `query <../core_concepts/glossary.html#query>`__ creator can get information only about own account.

All the details (set by the account owner or owners of other accounts) will be returned.

| Related API method: `Get Account <../api/queries.html#get-account>`__
| Usage in Java bindings: ``Role.kGetMyAccount``
| Usage in Python bindings: ``Role_kGetMyAccount``
|

**Example**

| Admin creates Alice account in the domain that has only can_get_my_account permission. Alice can access own account information.
|

.. literalinclude:: ../../../example/python/permissions/can_get_my_account.py
    :language: python
    :linenos:
    :lines: 9-39

Account Asset
-------------

can_get_all_acc_ast
^^^^^^^^^^^^^^^^^^^

Allows getting a balance of `assets <../core_concepts/glossary.html#asset>`__ on any `account <../core_concepts/glossary.html#account>`__ within the system.

`Query <../core_concepts/glossary.html#query>`__ response will contain information about all the assets that ever been assigned to an account.

| Related API method: `Get Account Assets <../api/queries.html#get-account-assets>`__
| Usage in Java bindings: ``Role.kGetAllAccAst``
| Usage in Python bindings: ``Role_kGetAllAccAst``
|

**Example**

| Admin creates Alice account in a different domain that has only can_get_all_acc_ast permission. Alice can access assets balance on Admin account.
|

.. literalinclude:: ../../../example/python/permissions/can_get_all_acc_ast.py
    :language: python
    :linenos:
    :lines: 9-40

can_get_domain_acc_ast
^^^^^^^^^^^^^^^^^^^^^^

Allows getting a balance of specified `asset <../core_concepts/glossary.html#asset>`__ on any `account <../core_concepts/glossary.html#account>`__ within the same `domain <../core_concepts/glossary.html#domain>`__ as a domain of `query <../core_concepts/glossary.html#query>`__ creator account.

Query response will contain information about all the assets that ever been assigned to an account.

| Related API method: `Get Account Assets <../api/queries.html#get-account-assets>`__
| Usage in Java bindings: ``Role.kGetDomainAccAst``
| Usage in Python bindings: ``Role_kGetDomainAccAst``
|

**Example**

| Admin creates Alice account in the same domain that has only can_get_domain_acc_ast permission. Alice can access assets balance on Admin account.
|

.. literalinclude:: ../../../example/python/permissions/can_get_domain_acc_ast.py
    :language: python
    :linenos:
    :lines: 9-39

can_get_my_acc_ast
^^^^^^^^^^^^^^^^^^

Allows getting a balance of specified `asset <../core_concepts/glossary.html#asset>`__ on `account <../core_concepts/glossary.html#account>`__ of `query <../core_concepts/glossary.html#query>`__ creator.

Query response will contain information about all the assets that ever been assigned to an account.

| Related API method: `Get Account Assets <../api/queries.html#get-account-assets>`__
| Usage in Java bindings: ``Role.kGetMyAccAst``
| Usage in Python bindings: ``Role_kGetMyAccAst``
|

**Example**

| Admin creates Alice account in a domain that has only can_get_my_acc_ast permission. Alice can access assets balance on own account.
|

.. literalinclude:: ../../../example/python/permissions/can_get_my_acc_ast.py
    :language: python
    :linenos:
    :lines: 9-39

Account Asset Transaction
-------------------------

can_get_all_acc_ast_txs
^^^^^^^^^^^^^^^^^^^^^^^

Allows getting `transactions <../core_concepts/glossary.html#transaction>`__ associated with a specified `asset <../core_concepts/glossary.html#asset>`__ and any `account <../core_concepts/glossary.html#account>`__ within the system.

.. Note:: Incoming asset transfers will also appear in the query response.

| Related API method: `Get Account Asset Transactions <../api/queries.html#get-account-asset-transactions>`__
| Usage in Java bindings: ``Role.kGetAllAccAstTxs``
| Usage in Python bindings: ``Role_kGetAllAccAstTxs``
|

**Example**

| Admin creates Alice account in a different domain that has can_get_all_acc_ast_txs, can_receive and can_transfer permissions. Admin issues some amount of coins and transfers them to Alice. Alice can query all transactions related to coins and Admin account.
|

.. literalinclude:: ../../../example/python/permissions/can_get_all_acc_ast_txs.py
    :language: python
    :linenos:
    :lines: 9-47

can_get_domain_acc_ast_txs
^^^^^^^^^^^^^^^^^^^^^^^^^^

Allows getting `transactions <../core_concepts/glossary.html#transaction>`__ associated with a specified `asset <../core_concepts/glossary.html#asset>`__ and an `account <../core_concepts/glossary.html#account>`__ from the same `domain <../core_concepts/glossary.html#domain>`__ as `query <../core_concepts/glossary.html#query>`__ creator.

.. Note:: Incoming asset transfers will also appear in the query response.

| Related API method: `Get Account Asset Transactions <../api/queries.html#get-account-asset-transactions>`__
| Usage in Java bindings: ``Role.kGetDomainAccAstTxs``
| Usage in Python bindings: ``Role_kGetDomainAccAstTxs``
|

**Example**

| Admin creates Alice in the same domain that has only can_get_domain_acc_ast_txs permission. Admin issues some amount of coins and transfers them to Alice. Alice can query all transactions related to coins and Admin account.
|

.. literalinclude:: ../../../example/python/permissions/can_get_domain_acc_ast_txs.py
    :language: python
    :linenos:
    :lines: 9-42

can_get_my_acc_ast_txs
^^^^^^^^^^^^^^^^^^^^^^

Allows getting `transactions <../core_concepts/glossary.html#transaction>`__ associated with the `account <../core_concepts/glossary.html#account>`__ of `query <../core_concepts/glossary.html#query>`__ creator and specified `asset <../core_concepts/glossary.html#asset>`__.

.. Note:: Incoming asset transfers will also appear in the query response.

| Related API method: `Get Account Asset Transactions <../api/queries.html#get-account-asset-transactions>`__
| Usage in Java bindings: ``Role.kGetMyAccAstTxs``
| Usage in Python bindings: ``Role_kGetMyAccAstTxs``
|

**Example**

| Admin creates Alice account in a domain that has only can_get_my_acc_ast_txs permission. Admin issues some amount of coins and transfers them to Alice. Alice can query all transactions related to coins and own account.
|

.. literalinclude:: ../../../example/python/permissions/can_get_my_acc_ast_txs.py
    :language: python
    :linenos:
    :lines: 9-42

Account Transaction
-------------------

can_get_all_acc_txs
^^^^^^^^^^^^^^^^^^^

Allows getting all `transactions <../core_concepts/glossary.html#transaction>`__ issued by any `account <../core_concepts/glossary.html#account>`__ within the system.

.. Note:: Incoming asset transfer inside a transaction would NOT lead to an appearance of the transaction in the command output.

| Related API method: `Get Account Asset Transactions <../api/queries.html#get-account-asset-transactions>`__
| Usage in Java bindings: ``Role.kGetAllAccTxs``
| Usage in Python bindings: ``Role_kGetAllAccTxs``
|

**Example**

| Admin creates Alice account in a different domain that has only can_get_all_acc_txs permiison. Alice can request all the transactions issues by Admin.
|

.. literalinclude:: ../../../example/python/permissions/can_get_all_acc_txs.py
    :language: python
    :linenos:
    :lines: 9-40

can_get_domain_acc_txs
^^^^^^^^^^^^^^^^^^^^^^

Allows getting all `transactions <../core_concepts/glossary.html#transaction>`__ issued by any `account <../core_concepts/glossary.html#account>`__ from the same `domain <../core_concepts/glossary.html#domain>`__ as `query <../core_concepts/glossary.html#query>`__ creator.

.. Note:: Incoming asset transfer inside a transaction would NOT lead to an appearance of the transaction in the command output.

| Related API method: `Get Account Asset Transactions <../api/queries.html#get-account-asset-transactions>`__
| Usage in Java bindings: ``Role.kGetDomainAccTxs``
| Usage in Python bindings: ``Role_kGetDomainAccTxs``
|

**Example**

| Admin creates Alice account in the same domain that has only can_get_domain_acc_txs permission. Alice can request all the transactions issued by Admin.
|

.. literalinclude:: ../../../example/python/permissions/can_get_domain_acc_txs.py
    :language: python
    :linenos:
    :lines: 9-39

can_get_my_acc_txs
^^^^^^^^^^^^^^^^^^

Allows getting all `transactions <../core_concepts/glossary.html#transaction>`__ issued by an `account <../core_concepts/glossary.html#account>`__ of `query <../core_concepts/glossary.html#query>`__ creator.

.. Note:: Incoming asset transfer inside a transaction would NOT lead to an appearance of the transaction in the command output.

| Related API method: `Get Account Asset Transactions <../api/queries.html#get-account-asset-transactions>`__
| Usage in Java bindings: ``Role.kGetMyAccTxs``
| Usage in Python bindings: ``Role_kGetMyAccTxs``
|

**Example**

| Admin creates Alice account in a domain that has only can_get_my_acc_txs permission. Alice can get all transactions issued by own account.
|

.. literalinclude:: ../../../example/python/permissions/can_get_my_acc_txs.py
    :language: python
    :linenos:
    :lines: 9-39

Asset
-----

can_read_assets
^^^^^^^^^^^^^^^

Allows getting information about `asset <../core_concepts/glossary.html#asset>`__ precision.

| Related API method: `Get Asset Info <../api/queries.html#get-asset-info>`__
| Usage in Java bindings: ``Role.kReadAssets``
| Usage in Python bindings: ``Role_kReadAssets``
|

**Example**

| Admin creates Alice account in a domain that has can_read_assets permissions. Alice can query information about any asset.
|

.. literalinclude:: ../../../example/python/permissions/can_read_assets.py
    :language: python
    :linenos:
    :lines: 9-40

Block Stream
------------

can_get_blocks
^^^^^^^^^^^^^^

Allows subscription to the stream of accepted `blocks <../core_concepts/glossary.html#block>`__.

| Usage in Java bindings: ``Role.kGetBlocks``
| Usage in Python bindings: ``Role_kGetBlocks``
|

Role
----

can_get_roles
^^^^^^^^^^^^^

Allows getting a list of `roles <../core_concepts/glossary.html#role>`__ within the system.
Allows getting a list of `permissions <../core_concepts/glossary.html#permission>`__ associated with a role.

| Related API methods: `Get Roles <../api/queries.html#get-roles>`__, `Get Role Permissions <../api/queries.html#get-role-permissions>`__
| Usage in Java bindings: ``Role.kGetRoles``
| Usage in Python bindings: ``Role_kGetRoles``
|

**Example**

| Admin creates Alice account in a domain that has can_get_roles permission. Alice can query list of all existing roles. Alice can query list of permissions contained in any role.
|

.. literalinclude:: ../../../example/python/permissions/can_get_roles.py
    :language: python
    :linenos:
    :lines: 9-52

Signatory
---------

can_get_all_signatories
^^^^^^^^^^^^^^^^^^^^^^^

Allows getting a list of public keys linked to an `account <../core_concepts/glossary.html#account>`__ within the system.

| Related API method: `Get Signatories <../api/queries.html#get-signatories>`__
| Usage in Java bindings: ``Role.kGetAllSignatories``
| Usage in Python bindings: ``Role_kGetAllSignatories``
|

**Example**

| Admin creates Alice account in a different domain that has only can_get_all_signatories permission. Alice can query a list of public keys related to Admin account.
|

.. literalinclude:: ../../../example/python/permissions/can_get_all_signatories.py
    :language: python
    :linenos:
    :lines: 9-40

can_get_domain_signatories
^^^^^^^^^^^^^^^^^^^^^^^^^^

Allows getting a list of public keys of any `account <../core_concepts/glossary.html#account>`__ within the same `domain <../core_concepts/glossary.html#domain>`__ as the domain of `query <../core_concepts/glossary.html#query>`__ creator account.

| Related API method: `Get Signatories <../api/queries.html#get-signatories>`__
| Usage in Java bindings: ``Role.kGetDomainSignatories``
| Usage in Python bindings: ``Role_kGetDomainSignatories``
|

**Example**

| Admin creates Alice account in the same domain that has only can_get_domain_signatories permission. Alice can query a list of public keys related to Admin account.
|

.. literalinclude:: ../../../example/python/permissions/can_get_domain_signatories.py
    :language: python
    :linenos:
    :lines: 9-39

can_get_my_signatories
^^^^^^^^^^^^^^^^^^^^^^

Allows getting a list of public keys of `query <../core_concepts/glossary.html#query>`__ creator `account <../core_concepts/glossary.html#account>`__.

| Related API method: `Get Signatories <../api/queries.html#get-signatories>`__
| Usage in Java bindings: ``Role.kGetMySignatories``
| Usage in Python bindings: ``Role_kGetMySignatories``
|

**Example**

| Admin creates Alice account in a domain that has only can_get_my_signatories permission. Alice can query a list of public keys related to own account.
|

.. literalinclude:: ../../../example/python/permissions/can_get_my_signatories.py
    :language: python
    :linenos:
    :lines: 9-39

Transaction
-----------

can_get_all_txs
^^^^^^^^^^^^^^^

Allows getting any `transaction <../core_concepts/glossary.html#transaction>`__ by hash.

| Related API method: `Get Transactions <../api/queries.html#get-transactions>`__
| Usage in Java bindings: ``Role.kGetAllTxs``
| Usage in Python bindings: ``Role_kGetAllTxs``
|

**Example**

| Admin issues several transactions and creates Alice account in a different domain that has only can_get_all_txs permission. Alice (knowing transactions hashes) can query transactions issued by Admin Account.
|

.. literalinclude:: ../../../example/python/permissions/can_get_all_txs.py
    :language: python
    :linenos:
    :lines: 9-72

can_get_my_txs
^^^^^^^^^^^^^^

Allows getting `transaction <../core_concepts/glossary.html#transaction>`__ (that was issued by `query <../core_concepts/glossary.html#query>`__ creator) by hash.

| Related API method: `Get Transactions <../api/queries.html#get-transactions>`__
| Usage in Java bindings: ``Role.kGetMyTxs``
| Usage in Python bindings: ``Role_kGetMyTxs``
|

**Example**

| Admin creates Alice account in a different domain. Alice (knowing transactions hashes) issues several transactions. Alice can query own transactions.
|

.. literalinclude:: ../../../example/python/permissions/can_get_my_txs.py
    :language: python
    :linenos:
    :lines: 9-76

Supplementary Sources
=====================

.. literalinclude:: ../../../example/python/permissions/commons.py
    :language: python
    :linenos:
    :caption: commons.py

.. literalinclude:: ../../permissions_compiler/consts.py
    :language: python
    :linenos:
    :caption: consts.py
