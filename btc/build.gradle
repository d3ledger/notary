buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        //Spring-boot
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
    }
}

apply plugin: "kotlin-spring" // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin

dependencies {
    compile project(":notary-commons")

    //bitcoin
    compile 'org.bitcoinj:bitcoinj-core:0.14.7'
    // https://mvnrepository.com/artifact/org.iq80.leveldb/leveldb
    compile group: 'org.iq80.leveldb', name: 'leveldb', version: '0.10'
    // https://mvnrepository.com/artifact/org.fusesource.leveldbjni/leveldbjni
    compile group: 'org.fusesource.leveldbjni', name: 'leveldbjni-all', version: '1.8'

    //Spring-boot
    compile("org.springframework.boot:spring-boot-starter:$spring_boot_version") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    compile("org.springframework.boot:spring-boot-starter-web:$spring_boot_version") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'org.hibernate'
    }
    //TODO this is very dirty hack. This dependency must be removed after migration to newer version of Spring Boot
    // https://mvnrepository.com/artifact/org.hibernate/hibernate-validator
    compile group: 'org.hibernate', name: 'hibernate-validator', version: '6.0.14.Final'

    compile "org.springframework.boot:spring-boot-starter-jetty:$spring_boot_version"

    compile("org.springframework.boot:spring-boot-starter-actuator:$spring_boot_version") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }

    // https://mvnrepository.com/artifact/commons-logging/commons-logging
    compile group: 'commons-logging', name: 'commons-logging', version: '1.2'

    // https://mvnrepository.com/artifact/com.github.jleskovar/btc-rpc-client
    compile group: 'com.github.jleskovar', name: 'btc-rpc-client', version: '1.1.0'

}

// Forms a list full of 'btcSendToAddress' task arguments
def getBtcSendToAddressArgs() {
    List<String> args = new ArrayList<>()
    if (project.hasProperty("address")) {
        args.add(project.property("address").toString())
    }
    if (project.hasProperty("amountBtc")) {
        args.add(project.property("amountBtc").toString())
    }
    return args
}

// Forms a list full of 'btcGenerateBlocks' task arguments
def getBtcGenerateBlocksArgs() {
    List<String> args = new ArrayList<>()
    if (project.hasProperty("blocks")) {
        args.add(project.property("blocks").toString())
    }
    return args
}

/** Sends money to Bitcoin address
 *
 * Usage ./gradlew btcSendToAddress -Paddress=<address> -PamountBtc=<amountBtc>
 *  */
task btcSendToAddress(type: JavaExec) {
    main = 'cli.BtcSendToAddressMain'
    args getBtcSendToAddressArgs()
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}

/** Generates blocks in Bitcoin blockchain
 *
 * Usage ./gradlew btcGenerateBlocks -Pblocks=<blocks>
 */
task btcGenerateBlocks(type: JavaExec) {
    main = 'cli.BtcGenerateBlocksMain'
    args getBtcGenerateBlocksArgs()
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}

sonarqube {
    properties {
        property "sonar.projectKey", "notary:btc"
    }
}
