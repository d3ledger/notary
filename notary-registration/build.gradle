buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        //Spring-boot
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
    }
}

apply plugin: 'application'
apply plugin: "kotlin-spring" // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin
apply plugin: 'org.springframework.boot'
mainClassName = "registration.RegistrationMain"

dependencies {
    compile project(":notary-commons")

    //Spring-boot
    compile('org.springframework.boot:spring-boot-starter') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'org.hibernate'
    }

    compile 'org.springframework.boot:spring-boot-starter-jetty'

    compile('org.springframework.boot:spring-boot-starter-actuator') {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }

    // https://mvnrepository.com/artifact/commons-logging/commons-logging
    compile group: 'commons-logging', name: 'commons-logging', version: '1.2'
}

task runRegistration(type: JavaExec) {
    main = 'registration.RegistrationMain'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
    systemProperty 'java.library.path', getIrohaLibPath()
    environment "LD_LIBRARY_PATH", getIrohaLibPath()
}

sonarqube {
    properties {
        property "sonar.projectKey", "notary:notary-registration"
    }
}
