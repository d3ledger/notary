group 'd3'
version '1.0'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        //Spring-boot
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
    }
}

apply plugin: 'application'
apply plugin: "kotlin-spring" // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin
apply plugin: 'com.github.johnrengelman.shadow'
shadowDistZip.classifier = 'shadow'
shadowDistTar.classifier = 'shadow'

dependencies {

    final def springfoxSwagger2Version = '2.9.2'
    final def springBootVersion = '2.1.3.RELEASE'
    final def kotlinVersion = '1.3.10'

    implementation project(":notary-commons")
    implementation project(":eth")

    // kotlin related
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.1'
    compile 'io.github.microutils:kotlin-logging:1.6.24'
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"

    //Iroha-java related
    implementation('com.github.hyperledger.iroha-java:testcontainers:4.0.0') {
        exclude group: 'org.slf4j'
    }

    //Spring-boot
    implementation("org.springframework.boot:spring-boot-starter:$springBootVersion") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
    implementation("org.springframework.boot:spring-boot-starter-web:$springBootVersion") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'org.hibernate'
    }
    implementation "io.springfox:springfox-swagger2:$springfoxSwagger2Version"
    implementation "io.springfox:springfox-swagger-ui:$springfoxSwagger2Version"

    //TODO this is very dirty hack. This dependency must be removed after migration to newer version of Spring Boot
    // https://mvnrepository.com/artifact/org.hibernate/hibernate-validator

    implementation 'org.hibernate:hibernate-validator:6.0.14.Final'

    implementation "org.springframework.boot:spring-boot-starter-jetty:$springBootVersion"

    implementation "commons-logging:commons-logging:1.2"

    compile 'com.google.protobuf:protobuf-java-util:3.6.1'
    compile 'org.bitcoinj:bitcoinj-core:0.14.7'

    //Web3j
    compile 'org.web3j:crypto:4.1.1'
    compile 'org.web3j:core:4.1.1'
    
    // Groovy
    compile group: 'org.codehaus.groovy', name: 'groovy', version: '3.0.0-alpha-4'

    testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"

}

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDirs += 'src/integration-test/kotlin'
        }
        resources {
            srcDirs = ["src/integration-test/resources"]
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Run bootstrap integration tests'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    setWorkingDir("$rootDir/")
    // Enable JUnit5 tests
    useJUnitPlatform {
    }

    mustRunAfter test
}
check.dependsOn integrationTest

sourceCompatibility = 1.8


mainClassName = "jp.co.soramitsu.bootstrap.BootstrapMain"

task runBootstrap(type: JavaExec ) {
    main = mainClassName
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}

sonarqube {
    properties {
        property "sonar.projectKey", "bootstrap"
    }
}
