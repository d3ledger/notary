buildscript {
    repositories {
        mavenCentral()
        jcenter()
        // gradle plugins repository
        gradlePluginPortal()
    }
}

plugins {
    id 'jp.co.soramitsu.sora-plugin' version '0.1.2'
}

apply plugin: 'application'
apply plugin: "kotlin-spring" // See https://kotlinlang.org/docs/reference/compiler-plugins.html#kotlin-spring-compiler-plugin
apply plugin: 'com.github.johnrengelman.shadow'
mainClassName = "com.d3.exchange.exchanger.ExchangerMain"
shadowDistZip.classifier = 'shadow'
shadowDistTar.classifier = 'shadow'
// name of jar file that the shadowJar plugin generates
shadowJar.archiveName = 'app.jar'

// sora-plugin configs
soramitsu {
    projectGroup = 'd3-deploy'
    docker {
        // docker tag
        tag = System.getenv("TAG")
        // jar file that is used in the generated Dockerfile
        jar = new File("build/libs/app.jar")
        // the rest in configured using env variables
    }
}

dependencies {
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.0.1'

    implementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"

    implementation project(":notary-commons")
    implementation project(":notary-registration")
    testImplementation project(":notary-iroha-integration-test")

    //Spring
    implementation group: 'org.springframework', name: 'spring-context', version: '5.1.4.RELEASE'

    // https://mvnrepository.com/artifact/commons-logging/commons-logging
    implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'

    // Integration
    implementation 'org.apache.commons:commons-math3:3.6.1'
    implementation "com.github.soramitsu.chain-adapter:chain-adapter-client:$chain_adapter_client_version"

    // khttp - consume http
    implementation 'khttp:khttp:0.1.0'
}

task runExchanger(type: JavaExec) {
    main = 'com.d3.exchange.exchanger.ExchangerMain'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}

sonarqube {
    properties {
        property "sonar.projectKey", "notary:exchanger"
    }
}

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDirs += 'src/integration-test/kotlin'
        }
        resources {
            srcDirs = ["src/integration-test/resources"]
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Run exchanger integration tests'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    setWorkingDir("$rootDir/")
    // Enable JUnit5 tests
    useJUnitPlatform {
    }

    mustRunAfter test
}
check.dependsOn integrationTest
