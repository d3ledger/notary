dependencies {
    compile project(":notary-commons")

    // Eth library
    compile 'org.web3j:core:4.1.1'

    // Waves library
    compile 'com.wavesplatform:wavesj:0.4'
}


apply plugin: 'com.github.johnrengelman.shadow'

sonarqube {
    properties {
        property "sonar.projectKey", "notary:eth"
    }
}

task runSendEther(type: JavaExec) {
    main = 'com.d3.eth.deploy.EthSendEther'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}

/*
 * Send Ether from contract with internal transaction
 * Example:
 * ./gradlew runSendEtherFromContract --args="0x4a59b6031e42f77df0554d253bd63cbf9113ea30 0.00000001"
 */
task runSendEtherFromContract(type: JavaExec) {
    main = 'com.d3.eth.deploy.TransferEthereumFromContract'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}

// Deploy ethereum smart contracts - RelayRegistry, Master, add notaries wallets to Master and lock Master.
task runPreDeployEthereum(type: JavaExec) {
    main = 'com.d3.eth.deploy.EthPreDeployMain'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}

task runEthDeposit(type: JavaExec) {
    main = 'com.d3.eth.deposit.EthDepositMain'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}
