buildscript {
    ext.kotlin_version = '1.3.10'
    ext.ktor_version = '1.0.0'
    ext.spring_boot_version = '1.5.4.RELEASE'

    repositories {
        mavenCentral()
        jcenter()
    }
    configurations.maybeCreate("pitest")
    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.3.0'
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.1'
        pitest 'org.pitest:pitest-junit5-plugin:0.3'
    }
}


group = 'd3'
version = '1.0-SNAPSHOT'


apply plugin: 'com.google.protobuf'
apply plugin: "jacoco"
apply plugin: 'info.solidsoft.pitest'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'org.sonarqube'

allprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.dokka'
    repositories {
        mavenCentral()
        // for Ktor
        jcenter()
        maven { url = 'https://dl.bintray.com/kotlin/ktor' }
    }
}

subprojects {
    dokka {
        outputFormat = 'html' 
        outputDirectory = "build/reports/dokka"
        reportUndocumented = true
        sourceDirs = files("${project.projectDir}/src/main/kotlin")
    }
    sonarqube {
        properties {
            property "sonar.java.binaries", "${project.projectDir}/build/classes"
            property "sonar.java.test.binaries", "${project.projectDir}/build/test-results/test/binary"
            property "sonar.junit.reportsPaths", "${project.projectDir}/build/test-results/**/*.xml"
            property "sonar.jacoco.reportPaths", "${project.projectDir}/build/jacoco/test.exec"
            property "sonar.exclusions", "${project.projectDir}/**/*.txt"
        }
    }
}

sourceCompatibility = 1.8

// ------------------| Test dependencies |------------------

allprojects{
    dependencies{
        // unit tests
        testCompile('org.junit.jupiter:junit-jupiter-api:5.2.0')
        testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.0')
        // https://mvnrepository.com/artifact/org.mockito/mockito-all
        testCompile group: 'org.mockito', name: 'mockito-all', version: '2.0.2-beta'
        testCompile('com.nhaarman:mockito-kotlin:1.5.0') {
            exclude group: 'org.jetbrains.kotlin'
            exclude group: 'org.mockito'
        }

        // for setting env variables in tests
        testCompile group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.18.0'
        // to run both junit4 and junit5 tests
        testRuntime("org.junit.vintage:junit-vintage-engine:5.2.0")
    }
}

wrapper {
    gradleVersion = 4.10
}

jar {
    manifest {
        attributes 'Main-Class': 'notary.eth.EthNotaryMain'
    }
}

allprojects {
    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
}

allprojects {
    test {
        setWorkingDir("$rootDir/")
        useJUnitPlatform()
        systemProperty 'java.library.path', Paths.get(projectDir.getParent().toString(), "iroha_bindings", getCurrentOs()).toString()
        println "Runtime Iroha library path:${systemProperties}"
        environment "LD_LIBRARY_PATH", Paths.get(projectDir.getParent().toString(), "iroha_bindings", getCurrentOs()).toString()
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.5.1"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.14.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

compileKotlin.dependsOn ':generateProto'

task buildEthereumContracts(type: Exec) {
    description = 'Build Ethereum contracts'

    String contract_path = projectDir.toString().concat("/deploy/ethereum/contract")
    String bin_path = contract_path.concat("/bin")
    file(bin_path).mkdirs()

    doLast {
        logger.info(standardOutput.toString())
        logger.error(errorOutput.toString())
    }

    commandLine 'sh', '-c', 'solc <path>/*.sol --bin --abi --optimize -o <path>/bin --overwrite'.replace("<path>", contract_path)

}

task buildEthereumContractsBindings(type: Exec) {

    String contract_path = projectDir.toString().concat("/deploy/ethereum/contract")
    String bin_path = contract_path.concat("/bin")
    String wildcard = "<path>/*.bin".replace("<path>", bin_path)
    String cmd = 'for f in ' + wildcard + '; ' +
            'do ' +
            'name=$(echo "$f" | cut -f 1 -d \'.\'); ' +
            'web3j solidity generate -b ${name}.bin --abiFile=${name}.abi -o <bin_path> -p contract \n'.replace("<bin_path>", bin_path) +
            'done \n' +
            'cp deploy/ethereum/contract/bin/contract/* src/main/java/contract'

    commandLine 'bash', '-c', cmd
}

buildEthereumContractsBindings.dependsOn ':buildEthereumContracts'

// -------------------------| Iroha bindings |-------------------------

import org.gradle.internal.os.OperatingSystem

import java.nio.file.Paths

import static org.apache.tools.ant.taskdefs.condition.Os.*

static def getCurrentOs() {
    if (OperatingSystem.current().isMacOsX()) {
        return 'mac'
    }
    if (OperatingSystem.current().isLinux()) {
        return 'linux'
    }
}

//Forms a list of ETH passwords from command line arguments
def getEthPasswordsArgs() {
    List<String> args = new ArrayList<>()
    if (project.hasProperty("credentialsPassword")) {
        args.add(project.property("credentialsPassword").toString())
    }
    if (project.hasProperty("nodeLogin")) {
        args.add(project.property("nodeLogin").toString())
    }
    if (project.hasProperty("nodePassword")) {
        args.add(project.property("nodePassword").toString())
    }
    return args
}

task retrieveIrohaBindings(type: Exec) {
    description = 'Downloads Iroha binding for specific platform'

    def bindings_invocation = ['sh', 'iroha_bindings.sh', getCurrentOs()]

    commandLine bindings_invocation
}

task osInfo {
    description = 'Show information about the operating system'
    doLast {
        println "System:       ${OperatingSystem.current()}"
        println "Family:       ${OS_NAME}"
        println "Version:      ${OS_VERSION}"
        println "Architecture: ${OS_ARCH}"
    }
}

def getIrohaLibPath() {
    return Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
}

retrieveIrohaBindings.dependsOn(osInfo)

// -------------------------| End Iroha bindings |-------------------------

// -------------------------| PIT mutation testing |-------------------------

pitest {
    pitestVersion = "1.3.0"
    testPlugin = "junit5"
    targetClasses = ['util.*', 'notary.*', 'registration.*', 'withdrawalservice.*']
    excludedClasses = ['notary.db.*', '*Test*']
    targetTests = ['util.*', 'notary.*', 'registration.*', 'withdrawalservice.*']
    avoidCallsTo = ['kotlin.jvm.internal', 'mu']
    mutators = ['CONDITIONALS_BOUNDARY', 'NEGATE_CONDITIONALS', 'REMOVE_CONDITIONALS', 'MATH', 'INCREMENTS',
                'INVERT_NEGS', 'INLINE_CONSTS', 'VOID_METHOD_CALLS']
}

// -------------------------| JaCoCo code coverage |-------------------------

task codeCoverageReport(type: JacocoReport) {

    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
       sourceSets it.sourceSets.main
    }

    reports {
      xml.enabled true
      html.enabled true
      html.destination "${buildDir}/reports/jacoco"
      csv.enabled false
    }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects*.test
}
