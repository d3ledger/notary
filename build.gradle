buildscript {
    ext.kotlin_version = '1.2.41'
    ext.ktor_version = '0.9.2'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

group 'd3'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'kotlin'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    // for Ktor
    jcenter()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
}

dependencies {
    // ------------------| Src dependencies |------------------

    // kotlin related
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // rx
    compile "io.reactivex.rxjava2:rxjava:2.0.0"
    compile "io.reactivex.rxjava2:rxkotlin:2.0.0"

    // Iroha bindings
    def iroha_bindings_dir = Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
    compile fileTree(dir: iroha_bindings_dir, include: '*.jar')

    // Eth library
    compile 'org.web3j:core:3.3.1'

    // Waves library
    compile 'com.wavesplatform:wavesj:0.4'

    // DB layer
    compile 'org.jooq:jooq:3.10.6'
    compile 'org.xerial:sqlite-jdbc:3.7.2'

    // logging
    compile 'org.slf4j:slf4j-simple:1.7.25'
    compile 'io.github.microutils:kotlin-logging:1.4.9'

    // CLI arguments
    compile group: 'com.xenomachina', name: 'kotlin-argparser', version: '2.0.6'

    // Kyber
    // TODO @muratovv: add lib

    // Ktor - http
    compile "io.ktor:ktor-server-core:$ktor_version"
    compile "io.ktor:ktor-server-netty:$ktor_version"

    // ------------------| Test dependencies |------------------

    // unit tests
    testCompile group: 'junit', name: 'junit', version: '4.12'
    // TODO @muratovv: rework with testCompile when mocks go out from production code
    compile "com.nhaarman:mockito-kotlin:1.5.0"

}

kotlin {
    experimental {
        coroutines "enable"
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

sourceSets {
    main.java.srcDirs += 'src/main'

    test.java.srcDirs += 'src/test'
}

test {
    systemProperty 'java.library.path', Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
    println "Runtime Iroha library path:${systemProperties}"
}

// -------------------------| Iroha bindings |-------------------------

import org.gradle.internal.os.OperatingSystem

import java.nio.file.Paths

import static org.apache.tools.ant.taskdefs.condition.Os.*

static def getCurrentOs() {
    if (OperatingSystem.current().isMacOsX()) {
        return 'mac'
    }
    if (OperatingSystem.current().isLinux()) {
        return 'linux'
    }
}

task compileIrohaBindings(type: Exec) {
    description 'Generate Iroha binding for specific platform'

    def bindings_invocation = ['sh', 'iroha_bindings.sh', getCurrentOs()]

    commandLine bindings_invocation
}

task osInfo {
    description 'Show information about the operating system'
    doLast {
        println "System:       ${OperatingSystem.current()}"
        println "Family:       ${OS_NAME}"
        println "Version:      ${OS_VERSION}"
        println "Architecture: ${OS_ARCH}"
    }
}

compileIrohaBindings.dependsOn(osInfo)

// -------------------------| End Iroha bindings |-------------------------
