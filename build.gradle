buildscript {
    ext.kotlin_version = '1.2.50'
    ext.ktor_version = '0.9.2'

    repositories {
        mavenCentral()
        jcenter()
    }
    configurations.maybeCreate("pitest")
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.3.0'
        pitest 'org.pitest:pitest-junit5-plugin:0.3'
    }
}

group = 'd3'
version = '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'com.google.protobuf'
apply plugin: 'application'
apply plugin: "jacoco"
apply plugin: 'info.solidsoft.pitest'
mainClassName = 'notary.NotaryImpl'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    // for Ktor
    jcenter()
    maven { url = 'https://dl.bintray.com/kotlin/ktor' }
}

dependencies {
    // protobuf
    compile 'com.google.protobuf:protobuf-java:3.5.0'
    compile 'io.grpc:grpc-netty:1.8.0'
    compile 'io.grpc:grpc-protobuf:1.8.0'
    compile 'io.grpc:grpc-stub:1.8.0'

    // ------------------| Src dependencies |------------------

    // kotlin related
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    //bitcoin
    compile 'org.bitcoinj:bitcoinj-core:0.14.7'
    // https://mvnrepository.com/artifact/org.iq80.leveldb/leveldb
    compile group: 'org.iq80.leveldb', name: 'leveldb', version: '0.10'
    // https://mvnrepository.com/artifact/org.fusesource.leveldbjni/leveldbjni
    compile group: 'org.fusesource.leveldbjni', name: 'leveldbjni-all', version: '1.8'

    // rx2
    compile "io.reactivex.rxjava2:rxjava:2.0.0"
    compile "io.reactivex.rxjava2:rxkotlin:2.0.0"

    // converter rx1 to rx2
    // since eth client uses rx1, we need a converter to rx2
    compile "com.github.akarnokd:rxjava2-interop:0.12.7"

    // Iroha bindings
    def iroha_bindings_dir = Paths.get(projectDir.toString(), "iroha_bindings").toString()
    compile fileTree(dir: iroha_bindings_dir, include: '*.jar')

    // Eth library
    compile 'org.web3j:core:3.4.0'

    // Waves library
    compile 'com.wavesplatform:wavesj:0.4'

    // logging
    compile 'org.slf4j:slf4j-simple:1.7.25'
    compile 'io.github.microutils:kotlin-logging:1.4.9'

    // CLI arguments
    compile group: 'com.xenomachina', name: 'kotlin-argparser', version: '2.0.6'

    // Kyber
    // TODO @muratovv: add lib

    // Ktor - http
    compile "io.ktor:ktor-server-core:$ktor_version"
    compile "io.ktor:ktor-server-netty:$ktor_version"

    // khttp - consume http
    compile 'khttp:khttp:0.1.0'

    // JSON parser
    compile 'com.beust:klaxon:3.0.1'

    // JSON converter
    compile 'com.squareup.moshi:moshi-kotlin:1.5.0'

    // for Result
    compile group: 'com.github.kittinunf.result', name: 'result', version: '1.4.0'

    // Configuration
    compile group: 'com.jdiazcano.cfg4k', name: 'cfg4k-core', version: '0.8'

    // ------------------| Test dependencies |------------------

    // unit tests
    compile "org.junit.jupiter:junit-jupiter-api:5.2.0"

    testCompile('org.junit.jupiter:junit-jupiter-api:5.2.0')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.0')
    // TODO @muratovv: rework with testCompile when mocks go out from production code
    compile 'org.mockito:mockito-inline:2.18.3'
    compile('com.nhaarman:mockito-kotlin:1.5.0') {
        exclude group: 'org.jetbrains.kotlin'
        exclude group: 'org.mockito'
    }

}

kotlin {
    experimental {
        coroutines "enable"
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

sourceSets {
    main {
        java {
            srcDirs += "src/main"
            // iroha bindings
            srcDirs += "build/generated/source/proto/main/java"
            srcDirs += "build/generated/source/proto/main/grpc"

            srcDirs += "src/test"
        }
    }
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDirs += 'src/integration-test/kotlin'
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

test {
    useJUnitPlatform()
    systemProperty 'java.library.path', Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
    println "Runtime Iroha library path:${systemProperties}"
    environment "LD_LIBRARY_PATH", Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
}

task integrationTest(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs the integration tests.'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    // Enable JUnit5 tests
    useJUnitPlatform {
    }

    systemProperty 'java.library.path', Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
    environment "LD_LIBRARY_PATH", Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()

    mustRunAfter test
}
check.dependsOn integrationTest

run {
    systemProperty "java.library.path", Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.5.0"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.8.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

compileKotlin.dependsOn ':generateProto'

task buildEthereumContracts(type: Exec) {
    description = 'Build Ethereum contracts'

    String contract_path = projectDir.toString().concat("/deploy/ethereum/contract")
    String bin_path = contract_path.concat("/bin")
    file(bin_path).mkdirs()

    doLast {
        logger.info(standardOutput.toString())
        logger.error(errorOutput.toString())
    }

    commandLine 'sh', '-c', 'solc <path>/*.sol --bin --abi --optimize -o <path>/bin --overwrite'.replace("<path>", contract_path)


}

task buildEthereumContractsBindings(type: Exec) {

    String contract_path = projectDir.toString().concat("/deploy/ethereum/contract")
    String bin_path = contract_path.concat("/bin")
    String wildcard = "<path>/*.bin".replace("<path>", bin_path)
    String cmd = 'for f in ' + wildcard + '; ' +
            'do ' +
            'name=$(echo "$f" | cut -f 1 -d \'.\'); ' +
            'web3j solidity generate ${name}.bin ${name}.abi -o <bin_path> -p jp.co.soramitsu \n'.replace("<bin_path>", bin_path) +
            'done'

    commandLine 'bash', '-c', cmd
}

buildEthereumContractsBindings.dependsOn ':buildEthereumContracts'

// -------------------------| Iroha bindings |-------------------------

import org.gradle.internal.os.OperatingSystem

import java.nio.file.Paths

import static org.apache.tools.ant.taskdefs.condition.Os.*

static def getCurrentOs() {
    if (OperatingSystem.current().isMacOsX()) {
        return 'mac'
    }
    if (OperatingSystem.current().isLinux()) {
        return 'linux'
    }
}

task retrieveIrohaBindings(type: Exec) {
    description = 'Downloads Iroha binding for specific platform'

    def bindings_invocation = ['sh', 'iroha_bindings.sh', getCurrentOs()]

    commandLine bindings_invocation
}

task osInfo {
    description = 'Show information about the operating system'
    doLast {
        println "System:       ${OperatingSystem.current()}"
        println "Family:       ${OS_NAME}"
        println "Version:      ${OS_VERSION}"
        println "Architecture: ${OS_ARCH}"
    }
}

retrieveIrohaBindings.dependsOn(osInfo)

// -------------------------| End Iroha bindings |-------------------------

// -------------------------| Run services |-------------------------

task runEthNotary(type: JavaExec) {
    main = 'notary.eth.EthNotaryMain'
    classpath = sourceSets.main.runtimeClasspath

    systemProperty 'java.library.path', Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
    environment "LD_LIBRARY_PATH", Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
}

task runBtcNotary(type: JavaExec) {
    main = 'notary.btc.BtcNotaryMain'
    classpath = sourceSets.main.runtimeClasspath

    systemProperty 'java.library.path', Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
    environment "LD_LIBRARY_PATH", Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
}

task runBtcPreGen(type: JavaExec) {
    main = 'registration.btc.pregen.BtcPreGenerationMain'
    classpath = sourceSets.main.runtimeClasspath

    systemProperty 'java.library.path', Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
    environment "LD_LIBRARY_PATH", Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
}

task runBtcPreGenTrigger(type: JavaExec) {
    main = 'registration.btc.pregen.trigger.BtcPreGenerationTriggerMain'
    classpath = sourceSets.main.runtimeClasspath

    systemProperty 'java.library.path', Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
    environment "LD_LIBRARY_PATH", Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
}

task runEthRegistration(type: JavaExec) {
    main = 'registration.eth.EthRegistrationMain'
    classpath = sourceSets.main.runtimeClasspath

    systemProperty 'java.library.path', Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
    environment "LD_LIBRARY_PATH", Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
}

task runBtcRegistration(type: JavaExec) {
    main = 'registration.btc.BtcRegistrationMain'
    classpath = sourceSets.main.runtimeClasspath

    systemProperty 'java.library.path', Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
    environment "LD_LIBRARY_PATH", Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
}

task runDeployRelay(type: JavaExec) {
    main = 'registration.eth.relay.DeployRelayMain'
    classpath = sourceSets.main.runtimeClasspath

    systemProperty 'java.library.path', Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
    environment "LD_LIBRARY_PATH", Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
}

task runVacuumRelay(type: JavaExec) {
    main = 'vacuum.VacuumRelayMain'
    classpath = sourceSets.main.runtimeClasspath

    systemProperty 'java.library.path', Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
    environment "LD_LIBRARY_PATH", Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
}

task runWithdrawal(type: JavaExec) {
    main = 'withdrawalservice.WithdrawalServiceMain'
    classpath = sourceSets.main.runtimeClasspath

    systemProperty 'java.library.path', Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
    environment "LD_LIBRARY_PATH", Paths.get(projectDir.toString(), "iroha_bindings", getCurrentOs()).toString()
}

processResources {
    def profile = (project.hasProperty('profile') ? project.profile : 'develop').toLowerCase()

    from('src/main/resources') {
        include "**/**_${profile}.properties"
        rename "(.*)_${profile}.properties", '$1.properties'
    }

}

// -------------------------| JaCoCo code coverage |-------------------------

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['iroha/**',
                                        'notary/db/**',
                                        'contract/**',
                                        'integration/**'])
        })
    }
}

// -------------------------| PIT mutation testing |-------------------------

pitest {
    pitestVersion = "1.3.0"
    testPlugin = "junit5"
    targetClasses = ['util.*', 'notary.*', 'registration.*', 'withdrawalservice.*']
    excludedClasses = ['notary.db.*', '*Test*']
    targetTests = ['util.*', 'notary.*', 'registration.*', 'withdrawalservice.*']
    avoidCallsTo = ['kotlin.jvm.internal', 'mu']
    mutators = ['CONDITIONALS_BOUNDARY', 'NEGATE_CONDITIONALS', 'REMOVE_CONDITIONALS', 'MATH', 'INCREMENTS',
                'INVERT_NEGS', 'INLINE_CONSTS', 'VOID_METHOD_CALLS']
}
